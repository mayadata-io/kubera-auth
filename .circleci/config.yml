version: 2.1
orbs:
  go: circleci/go@1.6.0
  # CircleCI Certified Orb for Golang, 1.6.0 is the orb version
  # https://circleci.com/developer/orbs/orb/circleci/go
jobs:
  test:
  # test jobs runs go mod stage and runs go test
  # The tag specifies the image tag from cimg/go,
  # Ref: https://circleci.com/developer/images/image/cimg/go
    executor:
      name: go/default
      tag: '1.16.2'
    steps:
      # Get the code
      - checkout
      # Load modules from cache
      - go/load-cache
      # Runs go mod download
      - go/mod-download
      # Saves the modules in a Cache with the checksum of go.sum
      - go/save-cache
      - run:
          name: "Run tests with coverage"
          # Sets some environment variables to make tests run
          command: make coverage
      - run:
          name: "Upload coverage data to codecov"
          # Send result to CodeCov
          command: bash <(wget -qO - https://codecov.io/bash)
      - run:
          # Install GolangCI-Lint, this might be better off as a separate job for separated out âœ“
          name: "Setup GolangCI-Lint"
          command: wget https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh -O - | sh -s -- -b $(go env GOPATH)/bin v1.39.0
      - run:
          name: "Run GolangCI-Lint"
          command: golangci-lint run --timeout 5m
      # TODO: Find if there's a way to get different checks without running the builds in different jobs
      - run:
          name: "Build binary"
          command: CGO_ENABLED=0 go build -o ./server ./src
      - persist_to_workspace:
          root: ~/project
          paths:
          # NOTE: Only these files will be present in the next CircleCI job
          - server
          - templates
          - Dockerfile
          - Makefile
          # Persist ~/project/{server, templates, Dockerfile, Makefile} to workspace, to be used in build job
  build:
    executor:
      name: go/default
      tag: '1.16.2'
    steps:
      # NOTE: This job doesn't have the code
      - attach_workspace:
          at: ~/project
      - run: ls -la ~/project
      # depends on completion of test job
      - run: docker login -u $DNAME -p $DPASS
      # https://circleci.com/docs/2.0/building-docker-images/
      - setup_remote_docker
      # Build the binary in the go container
      - run:
        # The image tagging logic goes here, the env variables aren't exported to further steps
          name: "Build a docker image"
          command: |
            [[ $CIRCLE_BRANCH == TechPreview* ]] && export IMGTAG=$CIRCLE_BRANCH || export IMGTAG=$CIRCLE_BRANCH-<< pipeline.number >>
            # Build the image with $IMGTAG
            make build
            docker push mayadataio/kubera-auth:$IMGTAG
workflows:
  version: 2
  build:
    jobs:
      # test job should always run
      - test
      # build job should only run on master, TechPreview*, v* branches
      - build:
          requires:
            - test
          filters:
            branches:
              only:
                - master
                - /TechPreview.*/
                - /^v.*/
            tags:
              only:
              - /.*/
